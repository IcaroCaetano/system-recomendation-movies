import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors
import numpy as np

# Carregar os datasets
ratings = pd.read_csv("ratings_small.csv")  # Cont√©m userId, movieId, rating
movies = pd.read_csv("movies_metadata.csv", low_memory=False)  # Pode ter colunas problem√°ticas

# Converter 'id' para inteiro, ignorando erros
movies = movies[pd.to_numeric(movies["id"], errors="coerce").notna()]
movies["id"] = movies["id"].astype(int)

# Mesclar os datasets
df = ratings.merge(movies, left_on="movieId", right_on="id")

# Exibir os primeiros resultados
#print(df.head())



# Separar os g√™neros dos filmes
df["genres"] = df["genres"].str.split("|")

# Criar uma matriz de g√™neros bin√°ria (one-hot encoding)
genres_df = df.explode("genres").pivot_table(index="movieId", columns="genres", aggfunc="size", fill_value=0)

# Exibir a matriz de g√™neros
#print(genres_df.head())



# Agrupar as avalia√ß√µes por usu√°rio e calcular a m√©dia das notas por filme
user_profile = df.groupby(["userId", "movieId"])["rating"].mean().unstack()

# Exibir uma amostra do perfil do usu√°rio
#print(user_profile.head())



# Calcular a similaridade entre os filmes com base nos g√™neros
similarity_matrix = cosine_similarity(genres_df)

# Transformar em um DataFrame para facilitar a manipula√ß√£o
similarity_df = pd.DataFrame(similarity_matrix, index=genres_df.index, columns=genres_df.index)

# Exibir uma amostra da matriz de similaridade
#print(similarity_df.head())


# Fun√ß√£o para recomendar filmes semelhantes usando o modelo
# de a Filtragem Baseada em Conte√∫do, utilizando a similaridade
# do cosseno entre os filmes com base nos g√™neros.
def recommend_movies_content_based(movie_id, num_recommendations=5):
    """
    Retorna recomenda√ß√µes de filmes semelhantes com base no conte√∫do (g√™neros).

    Par√¢metros:
    - movie_id: ID do filme de refer√™ncia.
    - num_recommendations: N√∫mero de filmes recomendados.
    """

    # Buscar o t√≠tulo do filme correspondente ao movie_id
    movie_title = movies[movies["id"] == movie_id]["title"].values

    # Verifique se o movie_id est√° na matriz de similaridade
    if movie_id not in similarity_df.index:
        print(f"Erro: O movie_id {movie_id} n√£o est√° na matriz de similaridade!")
        return None

    print(f"T√≠tulo do filme de refer√™ncia: {movie_title[0]}")

    # Encontrar os filmes mais similares ao informado
    similar_movies = similarity_df[movie_id].sort_values(ascending=False)[1:num_recommendations + 1]

    # Retornar os t√≠tulos dos filmes semelhantes
    return movies[movies["id"].isin(similar_movies.index)][["title"]]


# **Testando a Recomenda√ß√£o Baseada em Conte√∫do**
movie_id = 3  # Escolha um filme para testar
print(recommend_movies_content_based(movie_id=movie_id, num_recommendations=5))


# Criar a matriz user-item
user_movie_ratings = df.pivot_table(index='userId', columns='movieId', values='rating')

# Substituir NaN por 0 (caso tenha filmes n√£o avaliados)
user_movie_ratings = user_movie_ratings.fillna(0)

# Criar o modelo KNN
knn = NearestNeighbors(metric='cosine', algorithm='brute')
knn.fit(user_movie_ratings.values)

# Fun√ß√£o para recomendar filmes semelhantes usando o modelo
# de filtragem colaborativa usando o KNM
# Ajustar para garantir que o input tenha a mesma dimens√£o
def recommend_movies_knn(movie_id, num_recommendations=5):
    # Buscar o t√≠tulo do filme correspondente ao movie_id
    movie_title = movies[movies["id"] == movie_id]["title"].values

    if movie_id not in user_movie_ratings.columns:
        print(f"Erro: O movie_id {movie_id} n√£o est√° na matriz de avalia√ß√µes!")
        return None

    print(f"T√≠tulo do filme de refer√™ncia: {movie_title[0]}")

    # Encontrar o √≠ndice do filme na matriz
    movie_index = user_movie_ratings.columns.get_loc(movie_id)

    # Ajustar a entrada para ter o mesmo n√∫mero de features
    movie_vector = np.zeros((1, user_movie_ratings.shape[1]))
    movie_vector[0, movie_index] = 1  # Ativar a posi√ß√£o do filme pesquisado

    # Encontrar os k vizinhos mais pr√≥ximos
    distances, indices = knn.kneighbors(movie_vector, n_neighbors=num_recommendations + 1)

    # Pegar os filmes recomendados (excluindo o pr√≥prio filme)
    recommended_movies = user_movie_ratings.columns[indices.flatten()[1:]]

    # Retornar os t√≠tulos dos filmes recomendados
    return movies[movies["id"].isin(recommended_movies)][["title"]]


# Exemplo: recomendar 5 filmes parecidos com um filme espec√≠fico usando KNN
movie_id = 3
print(recommend_movies_knn(movie_id=movie_id, num_recommendations=5))

# Geramos recomenda√ß√µes usando ambos os m√©todos:
# - KNN (Filtragem Colaborativa): Recomenda√ß√£o baseada nas avalia√ß√µes de usu√°rios.
# - Similaridade de Conte√∫do (Cosseno): Recomenda√ß√£o baseada nos g√™neros dos filmes.
def recommend_movies_hybrid(movie_id, num_recommendations=5, weight_knn=0.5, weight_content=0.5):
    """
    Modelo h√≠brido que combina Filtragem Colaborativa (KNN) e Filtragem Baseada em Conte√∫do (Cosseno).

    Par√¢metros:
    - movie_id: ID do filme de refer√™ncia.
    - num_recommendations: N√∫mero de filmes recomendados.
    - weight_knn: Peso da recomenda√ß√£o KNN.
    - weight_content: Peso da recomenda√ß√£o baseada em conte√∫do.
    """

    # Obter recomenda√ß√µes de ambos os m√©todos
    knn_recommendations = recommend_movies_knn(movie_id, num_recommendations)
    content_recommendations = recommend_movies_content_based(movie_id, num_recommendations)

    # Se algum m√©todo falhar, retorna o outro
    if knn_recommendations is None:
        return content_recommendations
    if content_recommendations is None:
        return knn_recommendations

    # Criar um dicion√°rio para armazenar os pesos
    scores = {}

    # Adicionar pesos das recomenda√ß√µes KNN
    for i, row in knn_recommendations.iterrows():
        scores[row["title"]] = scores.get(row["title"], 0) + weight_knn * (num_recommendations - i)

    # Adicionar pesos das recomenda√ß√µes Baseadas em Conte√∫do
    for i, row in content_recommendations.iterrows():
        scores[row["title"]] = scores.get(row["title"], 0) + weight_content * (num_recommendations - i)

    # Ordenar filmes por pontua√ß√£o e selecionar os melhores
    sorted_movies = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    recommended_titles = [movie[0] for movie in sorted_movies[:num_recommendations]]

    return recommended_titles


# üî• **Testando a Recomenda√ß√£o H√≠brida**
movie_id = 2  # Escolha um filme para testar
print(recommend_movies_hybrid(movie_id=movie_id, num_recommendations=5))